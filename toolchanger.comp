component toolchanger "This component controls the Boxford 240 Lathe Auto Tool ";

pin in bit enable = false "Toolchanger enable signal";

pin in bit tool_change "Receives signal from M6 that tool change required";
pin out bit tool_changed = false "Sends signal when tool change finished";
pin in s32 tool_requested "Receives Tx data from M6 (tool number requested) Only allows 1-8";
pin in s32 tool_current "Receives old tool number";
variable int tool_physical = 0; // Reflects current locked tool in ATC

pin in bit atc_limit "ATC limit switch";

pin in float position_fb "Position-feedback from stepgen";
pin out float position_cmd "Sends location required";
variable float position_req = 0; // Where we want to be

pin out bit homed = false "Sends signal when ATC has finished homing";
pin out bit homing = false "Sends signal when ATC is currently homing";

pin in bit axis_homing;
pin in bit axis_homed;

option singleton yes;

function _;
license "GPL";
;;

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>

#define HOMING_DELAY 1;
#define LOCKING_DELAY 1;

#define TOOL_MOVE 52;
#define LATCHING_MOVE 5
#define LOCK_MOVE 7.25;

#define STEP_LOCKING 0.001;
#define STEP_SLOW 0.005;
#define STEP_NORMAL 0.02;
#define STEP_FAST 0.03;

static bool delay = false;
static float timer;

enum events {
  RESET,
  PREPARE_HOMED,
  PREPARE_SLEEP,
  HOMING_START,
  HOMING_SEARCH,
  HOMING_LATCH,
  HOMING_FINISH,
  CHANGE_CONTROL,
  CHANGE_TOOL,
  CHANGE_ADVANCE,
  CHANGE_LOCK,
  DEFAULT
};

enum events event;

FUNCTION(_) {

  if (tool_change) {
    event = CHANGE_CONTROL;
  } else {
    tool_changed = true;
  }

  if (axis_homing) event = RESET;

  switch (event) {

  case RESET:

    // reset
    homed = false;

    if (axis_homed) event = PREPARE_HOMED;
    break;

  case PREPARE_HOMED:

    // machine is homed, register time and dispatch sleep event
    if (delay == false) {
      delay = true;
      timer = HOMING_DELAY;

      event = PREPARE_SLEEP;
    }
    break;

  case PREPARE_SLEEP:

    timer -= fperiod;

    if (timer <= 0) {
      timer = 0;
      delay = false;

      event = HOMING_START;
    }
    break;

  case HOMING_START:

    // check if limit switch is tripped
    // if it is, release it by moving away
    if (atc_limit) {
      position_cmd = 25;
    } else {
      position_cmd = position_fb + 5;

      event = HOMING_SEARCH;
    }
    break;

  case HOMING_SEARCH:

    if (!atc_limit) {
      position_cmd = 360 + 50;
    } else {
      position_cmd = position_fb + 5;

      event = HOMING_LATCH;
    }
    break;

  case HOMING_LATCH:

    if (atc_limit) {
      position_cmd += 1;
    } else {
      position_cmd = position_fb - 23;
      if (delay == false) {
        timer = LOCKING_DELAY;
        delay = true;
      }
      event = HOMING_FINISH;
    }
    break;

  case HOMING_FINISH:

    timer -= fperiod;

    if (timer <= 0) {
      timer = 0;
      delay = false;

      homed = true;

      tool_physical = 3;

      rtapi_print_msg(RTAPI_MSG_ERR, "Homed");
    }
    break;

  case CHANGE_CONTROL:

    if ( tool_physical == tool_requested ) {
      // current tool is the tool requested, do nothing. 
      tool_changed = true;
      event = DEFAULT;
    } else {
      // lets do some tool changes 
      event = CHANGE_TOOL;
    }

    break;

  case CHANGE_TOOL:

    position_req = position_fb + TOOL_MOVE;
    event = CHANGE_ADVANCE;

    break;

  case CHANGE_ADVANCE:

    if ( position_fb < position_req ) {
      if ( position_fb < position_req - LATCHING_MOVE ) {
        position_cmd += STEP_FAST;
      } else {
        position_cmd += STEP_NORMAL;
      }      
    }

    if ( position_fb >= position_req ) {
      position_req = position_fb - LOCK_MOVE;
      event = CHANGE_LOCK;
    }

    break;

  case CHANGE_LOCK:

    if ( position_fb > position_req ) {
      if ( ( position_req - position_fb ) < LATCHING_MOVE ) {
        position_cmd -= STEP_SLOW;
      } else {
        position_cmd -= STEP_LOCKING;
      }   
    }

    if ( position_fb <= position_req ) {
      // tool change complete, advance tool counter
      tool_physical -= 1;

      if ( tool_physical < 1 ) tool_physical = tool_physical + 8;

      event = CHANGE_CONTROL;
    }

    break;

  default:

    break;
  }
}
