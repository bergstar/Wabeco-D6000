/* 

EMC2 HAL component to implement ATC toolchanging in Boxford 240(F) CNC lathes

(c) ArcEye 09052011 schooner30@tiscali.co.uk
All values are metric

*/

component toolchanger               	"This component controls the Boxford 240 Lathe Auto Tool Changer. M6 calls this";

pin in bit toolchange               	"Receives signal from M6 that tool change required";
pin in s32 toolnumber               	"Receives Tx data from M6 (tool number requested) Only allows 1-8";
pin in s32 currenttoolnumber        	"Receives old tool number";
pin in float stepgen_pos_fb				"Position-feedback from stepgen";
pin out float position_cmd          	"Sends location required";

pin out bit toolchanged =false      	"Sends signal when tool change finished";
pin in bit enable = false          		"Toolchanger enable signal";

pin in bit jog_forward = false       	"Facilitate jogging of stepgen via component";
pin in bit jog_back = false          	"Facilitate jogging of stepgen via component";
pin in float jog_move = 0            	"distance to jog";

// allow parameters to be changed by setp for fine tuning
param rw float odd_move   = 43 	     	"distance from odd tool station to even one";
param rw float even_move  = 47       	"distance from even tool station to odd one";
param rw float clear_move = 5			"additional move to ensure clearing the pawl";
param rw float lock_move  = 9        	"backward move to ensure locking";
param rw float lock_delay = 100         "delay before lock back, very roughly in ms";

// internal variables

variable int progress_level = 0;    	// tracks the progress of the toolchange
variable int moves = 0;             	// number of moves to reach tool station  
variable int index = 0;             	// Counter used for comparison with moves
variable bool bEven = false;        	// Odd or Even station requested
variable bool bToggle = false;      	// Status of current move as Odd or Even
variable float position_req = 0;    	// Where we want to be
variable float position_accum = 0;  	// Moves are incremental but stepgen is absolute so add them up

variable bool bWarn = false;        	// one shot warning no tool set
variable int delay_index = 0;       	// counter for above
variable bool fjog = false;         	// use internal flags for jogging after initial signal to ensure that one command is
variable bool bjog = false;         	// carried out at a time - should not be possible to be otherwise but paranoia rules
variable float jmove = 0;

option singleton yes;               	// makes no sense to have more than one of these components running - only one ATC
function _;
author "ArcEye schooner30@tiscali.co.uk";
license "GPL";
;;


FUNCTION(_)
{	
    switch (progress_level)
        {
        case 0:  
        break;
                
        case 1: 
        break;

        case 3:
        break;
               
        case 5: 
        break;

        case 10:   
        break;  
                
        default:    
                progress_level = 10;
                rtapi_print_msg(RTAPI_MSG_ERR, "Error state in toolchanger - now disabled - unload toolchanger");            
        
        }
 
}




